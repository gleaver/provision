
" plugins: pathogen, nerdtree, YCM, solarized, ultisnips, tmux-navigator, ag
" airline, ctrlp

" Pathogen

execute pathogen#infect()
execute pathogen#helptags()

" General

set nocompatible
syntax on
filetype on

let leader = "\\"

set expandtab
set tabstop=2
set shiftwidth=2
set autoindent
set smartindent
set hlsearch
set number
set mouse=a
set foldmethod=syntax
set ignorecase
set incsearch
set foldcolumn=4
set colorcolumn=80
set splitright
set splitbelow

nnoremap <up> <nop>
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <down> <nop>
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <leader>rc :tabe ~/.vimrc<cr>
nnoremap <leader>src :so ~/.vimrc<cr>:echo "Reloaded .vimrc"<cr>

command! Q tabclose
command! W w

" solarized

set background=dark
let g:solarized_contrast="high" 
let g:solarized_termtrans=1
let g:solarized_termcolours=256
colorscheme solarized

" ctags

let Tlist_Ctags_Cmd = "/usr/bin/ctags"
let Tlist_Inc_Winwidth = 0
let Tlist_WinWidth = 80

nnoremap <leader>tlt :TlistToggle<cr><c-W>h
nnoremap <leader>tlu :TlistUpdate<cr>
nnoremap <leader>def :TlistShowPrototype<cr>
nnoremap <leader>tdb :echo "Refreshing ctags<c-r>=system("ctags --fields=+l -R .")<cr>"<cr>

" cscope

set cscopequickfix=s-,c-,d-,i-,t-,e-

nnoremap <leader>cc :lcs f c <C-R>=expand("<cword>")<cr><cr>:lopen<cr>
nnoremap <leader>cC :lcs f d <C-R>=expand("<cword>")<cr><cr>:lopen<cr>
nnoremap <leader>cd :lcs f g <C-R>=expand("<cword>")<cr><cr>:lopen<cr>
nnoremap <leader>ci :lcs f i <C-R>=expand("<cfile>")<cr><cr>:lopen<cr>
nnoremap <leader>cdb :echo "Build cscope db<c-r>=system("find -name '*.h' -o -name '*.c' -o -name '*.cpp' > cscope.allfiles && grep -v submodule cscope.allfiles > cscope.files && cscope -q -R -b -i cscope.files")<cr>"<cr>
nnoremap <leader>ca :cs add cscope.out<cr>

" searching

nnoremap <leader>ss :lv/<C-R>=expand("<cword>")<cr>/j ./**/*.cpp ./**/*.h<cr>:lopen<cr>
nnoremap <leader>sf :lv/<C-R>=expand("<cword>")<cr>/j <C-R>=expand("%")<cr><cr>:lopen<cr>

nnoremap <leader>f :lnext<cr>
nnoremap <leader>b :lprev<cr>
nnoremap <leader>cf :cnext<cr>
nnoremap <leader>cb :cprev<cr>

" formatting

nnoremap <leader>Fa 0:s/(\(.*,.*\))/(<c-v><cr>  \1)/<cr>0:s/,[ ]*/,<c-v><cr>  /g<cr>

" NERDTree

nnoremap <leader>nt :NERDTreeToggle<cr>

" YouCompleteMe
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_server_python_interpreter = "/usr/sbin/python3"
let g:ycm_collect_identifiers_from_tag_files = 1
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_key_list_select_completion = ['<TAB>', '<Down>']
let g:ycm_key_list_previous_completion = ['<S-TAB>', '<Up>']
let g:ycm_key_list_stop_completion = ['<C-y>']

nnoremap <leader>yc :YcmForceCompileAndDiagnostics<cr>
nnoremap <leader>yd :YcmDiag<cr>
nnoremap <leader>yt :YcmCompleter GetType<cr>
nnoremap <leader>yp :YcmCompleter GetParent<cr>
nnoremap <leader>ygg :YcmCompleter GoTo<cr>
nnoremap <leader>ygh :YcmCompleter GoToDeclaration<cr>
nnoremap <leader>ygd :YcmCompleter GoToDefinition<cr>
nnoremap <leader>ygi :YcmCompleter GoToImplementation<cr>
nnoremap <leader>yf :YcmCompleter FixIt<cr>

function! GuyPostComplete()
  if has_key(v:completed_item, 'abbr')
    if v:completed_item['kind'] ==# 'f'
      let l:word = v:completed_item['word']
      let l:prototype = v:completed_item['abbr']
      let l:pattern = 's/\v(.*)' . l:word . '$\m/\1' . l:prototype . "/"
      execute "normal! \<esc>:" . l:pattern . "\<cr>A"
      execute "normal! \<esc>:s/( /(/\<cr>A"
      execute "normal! \<esc>:s/ )/)/\<cr>A"
    endif
  endif
endfunction

augroup guy
  au!
  "au CompleteDone *.cpp,*.h call GuyPostComplete()
augroup END

" ctrl+p

let g:ctrlp_switch_buffer = ''

" UltiSnips

let g:UltiSnipsEditSplit = 'context'
let g:UltiSnipsSnippetsDir = "~/.vim/snips"
let g:UltiSnipsSnippetDirectories=["snips"]
let g:UltiSnipsExpandTrigger="<C-s>"
let g:UltiSnipsJumpForwardTrigger="<C-n>"
let g:UltiSnipsJumpBackwardTrigger="<C-m>"

